type AuthUser {
  id: String

  user: String!

  auth_key: String!
}

type Comment {
  id: String

  post: String!

  user: String!

  time: String!

  comment: String!
}

type CommentResponse {
  id: String!

  username: String!

  time: String!

  comment: String!
}

type Mutation {
  registerUser(input: registerRequest!): registerResponse!

  loginUser(input: loginRequest!): loginResponse!

  changeProfileImage(image: Upload!): String!

  createPost(title: String!, description: String!, image: Upload!): responseCreatePost!

  sendRil(post_id: String!): Boolean

  sendFek(post_id: String!): Boolean

  sendComment(input: requestSendComment!): responseSendComment!
}

type Post {
  id: String

  user: String!

  title: String!

  description: String!

  image: String!

  ril: [String!]!

  fek: [String!]!

  time: String!

  comments: [String!]!
}

type PostResponse {
  id: String!

  username: String!

  title: String!

  description: String!

  image: String!

  time: String!

  ril: Int!

  fek: Int!

  user_ril: Boolean!

  user_fek: Boolean!

  comments: [CommentResponse!]!

  comments_total: Int!
}

input PostsFilter {
  username: String
}

type Query {
  users: [UserResponse!]!

  user(username: String): UserResponse!

  posts(filter: PostsFilter): [PostResponse!]!
}

scalar Upload

type User {
  id: String

  username: String!

  password: String!

  profile_image: String
}

type UserResponse {
  id: String!

  username: String!

  profile_image: String
}

# See https://github.com/JetBrains/js-graphql-intellij-plugin/issues/665
# noinspection GraphQLTypeRedefinition
type __Directive {
  name: String!

  description: String

  locations: [__DirectiveLocation!]!

  args: [__InputValue!]!

  isRepeatable: Boolean!
}

# See https://github.com/JetBrains/js-graphql-intellij-plugin/issues/665
# noinspection GraphQLTypeRedefinition
enum __DirectiveLocation {
  QUERY

  MUTATION

  SUBSCRIPTION

  FIELD

  FRAGMENT_DEFINITION

  FRAGMENT_SPREAD

  INLINE_FRAGMENT

  VARIABLE_DEFINITION

  SCHEMA

  SCALAR

  OBJECT

  FIELD_DEFINITION

  ARGUMENT_DEFINITION

  INTERFACE

  UNION

  ENUM

  ENUM_VALUE

  INPUT_OBJECT

  INPUT_FIELD_DEFINITION
}

# See https://github.com/JetBrains/js-graphql-intellij-plugin/issues/665
# noinspection GraphQLTypeRedefinition
type __EnumValue {
  name: String!

  description: String

  isDeprecated: Boolean!

  deprecationReason: String
}

# See https://github.com/JetBrains/js-graphql-intellij-plugin/issues/665
# noinspection GraphQLTypeRedefinition
type __Field {
  name: String!

  description: String

  args: [__InputValue!]!

  type: __Type!

  isDeprecated: Boolean!

  deprecationReason: String
}

# See https://github.com/JetBrains/js-graphql-intellij-plugin/issues/665
# noinspection GraphQLTypeRedefinition
type __InputValue {
  name: String!

  description: String

  type: __Type!

  defaultValue: String
}

# See https://github.com/JetBrains/js-graphql-intellij-plugin/issues/665
# noinspection GraphQLTypeRedefinition
type __Schema {
  description: String

  types: [__Type!]!

  queryType: __Type!

  mutationType: __Type

  subscriptionType: __Type

  directives: [__Directive!]!
}

# See https://github.com/JetBrains/js-graphql-intellij-plugin/issues/665
# noinspection GraphQLTypeRedefinition
type __Type {
  kind: __TypeKind!

  name: String

  description: String

  fields(includeDeprecated: Boolean = false): [__Field!]

  interfaces: [__Type!]

  possibleTypes: [__Type!]

  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]

  inputFields: [__InputValue!]

  ofType: __Type

  specifiedByURL: String
}

# See https://github.com/JetBrains/js-graphql-intellij-plugin/issues/665
# noinspection GraphQLTypeRedefinition
enum __TypeKind {
  SCALAR

  OBJECT

  INTERFACE

  UNION

  ENUM

  INPUT_OBJECT

  LIST

  NON_NULL
}

input loginRequest {
  username: String!

  password: String!
}

type loginResponse {
  success: Boolean!

  auth_key: String

  reason: String
}

input registerRequest {
  username: String!

  password: String!

  verification_password: String!
}

type registerResponse {
  success: Boolean!

  auth_key: String

  reason: String
}

input requestSendComment {
  post_id: String!

  comment: String!
}

type responseCreatePost {
  post_id: String!
}

type responseSendComment {
  comment_id: String!

  time: String!
}

"""
The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.
"""
directive @defer (if: Boolean = true, label: String) on FRAGMENT_SPREAD|INLINE_FRAGMENT

# See https://github.com/JetBrains/js-graphql-intellij-plugin/issues/665
# noinspection GraphQLTypeRedefinition
"""
The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.
"""
directive @deprecated (reason: String = "No longer supported") on FIELD_DEFINITION|ARGUMENT_DEFINITION|INPUT_FIELD_DEFINITION|ENUM_VALUE

# See https://github.com/JetBrains/js-graphql-intellij-plugin/issues/665
# noinspection GraphQLTypeRedefinition
"""
The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.
"""
directive @include (if: Boolean!) on FIELD|FRAGMENT_SPREAD|INLINE_FRAGMENT

# See https://github.com/JetBrains/js-graphql-intellij-plugin/issues/665
# noinspection GraphQLTypeRedefinition
"""
The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.
"""
directive @skip (if: Boolean!) on FIELD|FRAGMENT_SPREAD|INLINE_FRAGMENT

# See https://github.com/JetBrains/js-graphql-intellij-plugin/issues/665
# noinspection GraphQLTypeRedefinition
"""
The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.
"""
directive @specifiedBy (url: String!) on SCALAR

schema {
  query: Query
  mutation: Mutation
}
